/**
We manually define which components and shit will have a load in animation
because it creates a new stacking context https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context
This allows us to have effects such as background blur and still have elements be affected by load in animations
If an element should blur the background, none of its ancestors should have created a new stacking context separate from the background
*/
.transition > * {
  --enter-stage: 0;
  --enter-step: 100ms;
  --enter-initial: 0ms;
  animation-duration: 1s;
  animation-timing-function: ease;
  animation-delay: 0s;
  animation-iteration-count: 1;
  animation-direction: normal;
  animation-fill-mode: both;
  animation-play-state: running;
  animation-name: unveil;
  animation-timeline: auto;
  animation-range-start: normal;

  will-change: transform, opacity;

  animation-delay: calc(var(--enter-initial) + var(--enter-stage) * var(--enter-step));
}

/* This needs to be hard-coded :( */
.transition > *:nth-child(1) {
  --enter-stage: 1;
}
.transition > *:nth-child(2) {
  --enter-stage: 2;
}
.transition > *:nth-child(3) {
  --enter-stage: 3;
}
.transition > *:nth-child(4) {
  --enter-stage: 4;
}
.transition > *:nth-child(5) {
  --enter-stage: 5;
}
.transition > *:nth-child(6) {
  --enter-stage: 6;
}
.transition > *:nth-child(7) {
  --enter-stage: 7;
}
.transition > *:nth-child(8) {
  --enter-stage: 8;
}
.transition > *:nth-child(9) {
  --enter-stage: 9;
}
.transition > *:nth-child(10) {
  --enter-stage: 10;
}
.transition > *:nth-child(11) {
  --enter-stage: 11;
}

@keyframes unveil {
  0% {
    opacity: 0;
    transform: translateY(10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0px);
  }
}

.perspective-shift-left {
  transition: all 0.3s ease;
}

.perspective-shift-left:hover {
  transform: scale(1.05) perspective(800px) rotate3d(0, 1, 0, 10deg);
  z-index: 2;
}

.perspective-shift-right {
  transition: all 0.3s ease;
}

.perspective-shift-right:hover {
  transform: scale(1.05) perspective(800px) rotate3d(0, 1, 0, -2deg);
}

.zoom {
  transition: all 0.3s ease;
}

.zoom:hover {
  transform: scale(1.02);
}

.blur-tile {
  /* background-color: rgba(0, 0, 0, 0.4); */
  border-radius: 25px;


  /*
  Okay I'm about to go on a huge rant.
  The following is a validas of October 19, 2025

  This shit is disabled because of different browsers having different bugs
  Consider the following code
  <!-- This works great, hello world is blurred on Chrome, Firefox, and Safari -->
  <div> This div does not create a new stacking context
    uh
    <div className='load-in blur'>
      hello world
    </div>
  </div>

  <!-- hello world is NOT blurred on Chrome -->
  <div className='load-in' style={{zIndex: 0}}> This creates a new stacking context
    uh
    <div className='blur' >
      hello world
    </div>
  </div>

  <!-- This works great, hello world is blurred on Chrome, Firefox, and Safari -->
  <div style={{zIndex: 0}}> This creates a new stacking context
    uh
    <div className='blur' >
      hello world
    </div>
  </div>

  .load-in {
    background-color: rgba(0, 0, 0, 0);
    background: transparent;
    animation: load-in 0.5s forwards;
  }

  @keyframes load-in {
    0% {
      opacity: 0;
      transform: translateX(-2.5%);
    }
    100% {
      opacity: 1;
      transform: translateX(0%);
    }
  }

  .blur {
      background-color: rgba(0, 0, 0, 0);
      border-radius: 25px;

      backdrop-filter: blur(8px) brightness(0.8);
      -webkit-backdrop-filter: blur(8px);
  }

  In the above code, we can simply go with option 1 to make sure our shit still
  works with load-in animation on all 3 platforms, even with the inconsistent
  behavior

  Now, if we were to also include on hover perspective transformations into the
  mix...


  <div className='blur-tile perspective-shift-left'>
    hello world
  </div>

  It'd work great on Chrome and Safari, but on Firefox... THE BLUR FUCKING
  DISAPPEARS AFTER YOU HOVER, WHY????
  */

  background-color: rgba(0, 0, 0, 0);
  backdrop-filter: blur(8px) brightness(0.8);
  -webkit-backdrop-filter: blur(8px);
}
